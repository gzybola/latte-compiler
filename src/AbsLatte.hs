module AbsLatte where
import Data.List
-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord)

instance Show Ident where
  show (Ident s) = s

data Program =
   Prog [TopDef]
  deriving (Eq,Ord,Show)

data TopDef =
   FnDef { tye :: Type
         , iden :: Ident
         , args :: [Arg]
         , block :: Block
         }
  deriving (Eq,Ord,Show)

data Arg =
   Ar Type Ident
  deriving (Eq,Ord)
instance Show Arg where
  show (Ar type_ id) = (show type_) ++ " " ++ (show id)

data Block =
   Blk [Stmt]
  deriving (Eq,Ord,Show)

data Stmt =
   Empty
 | BStmt Block
 | Decl Type [Item]
 | Ass Ident Expr
 | Incr Ident
 | Decr Ident
 | Ret Expr
 | VRet
 | Cond Expr Stmt
 | CondElse Expr Stmt Stmt
 | While Expr Stmt
 | SExp Expr
  deriving (Eq,Ord,Show)

data ContextStatement = BrStmt Stmt | FunDec TopDef

instance Show ContextStatement where
  show (BrStmt (While exp _)) = concat [ "while("
                                       , show exp
                                       , ")..."]
  show (BrStmt (Cond exp _)) = concat [ "if("
                                      , show exp
                                      , ")..."]
  show (BrStmt (CondElse exp stmt _)) = (show (BrStmt (Cond exp stmt))) ++ " else..." 
  show (FunDec (FnDef t id args _))   = concat [ (show t) 
                                               ,  " "
                                               , (show id)
                                               , "("
                                               , (intercalate " " (fmap show args))
                                               , ")"]
  show (BrStmt (BStmt _)) = "in block statement"
data Item =
   NoInit Ident
 | Init Ident Expr
  deriving (Eq,Ord,Show)

data Type =
   Int
 | Str
 | Bool
 | Void
 | Fun Type [Type]
  deriving (Eq,Ord,Show)

data Expr =
   EVar Ident
 | ELitInt Integer
 | ELitTrue
 | ELitFalse
 | EApp Ident [Expr]
 | EString String
 | Neg Expr
 | Not Expr
 | EMul Expr MulOp Expr
 | EAdd Expr AddOp Expr
 | ERel Expr RelOp Expr
 | EAnd Expr Expr
 | EOr Expr Expr
  deriving (Eq,Ord)

instance Show Expr where
  show (EVar id)      = show id 
  show (ELitInt n)    = show n
  show ELitTrue       = "True"
  show ELitFalse      = "False"
  show (EApp id exps) = show id
  show (EString str)  = str
  show (Neg exp)      = "-" ++ show exp
  show (Not exp)      = "!" ++ show exp
  show (EMul exp1 op exp2) = intercalate " " [ show exp1
                                             , show op
                                             , show exp2 ]
  show (EAdd exp1 op exp2) = intercalate " " [ show exp1
                                             , show op
                                             , show exp2 ]
  show (ERel exp1 op exp2) = intercalate " " [ show exp1
                                             , show op
                                             , show exp2 ]
  show (EAnd exp1 exp2) = intercalate " " [ show exp1
                                          , "&&" 
                                          , show exp2 ]
  show (EOr exp1 exp2) = intercalate " " [ show exp1
                                         , "||"
                                         , show exp2 ] 
 
data AddOp =
   Plus
 | Minus
  deriving (Eq,Ord)

instance Show AddOp where
  show Plus  = "+"
  show Minus = "-"

data MulOp =
   Times
 | Div
 | Mod
  deriving (Eq,Ord)

instance Show MulOp where
  show Times = "*"
  show Div   = "/"
  show Mod   = "%"

data RelOp =
   LTH
 | LE
 | GTH
 | GE
 | EQU
 | NE
  deriving (Eq,Ord)

instance Show RelOp where 
  show LTH   = "<"
  show LE    = "<="
  show GTH   = ">"
  show GE    = ">="
  show EQU   = "=="
  show NE    = "!="  
    
